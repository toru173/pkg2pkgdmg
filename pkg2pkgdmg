#!/bin/bash
#
# Converts a pkg (xar) file with an internal dmg into a hybrid
# pkgdmg file that will open as either a disk image or installer
# package, depending on the extension. This pkgdmg can then be
# optionally signed using tools that support signing a xar or
# pkg file.
#
# This should have never been written as a bash script. Bash
# (and shells in general) are terrible for manipulating
# binary files but It Works(tm) so I'm not changing it now.
# Feel free to reimpliment in the language of your choice
#
# I've licensed this with the Unlicense, but I'd still appreciate
# if you drop me a hello or let me know if you're using this!
#
# - toru173
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
# 
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

XAR_MAGIC="xar!"
KOLY_MAGIC="koly"

print_usage () {
    # Prints usage message

    echo ""
    echo "Usage: pkg2pkgdmg inputfile outputfile"
    echo ""
}

print_help () {
    # Prints help message explaining the script's purpose

    echo ""
    echo "Converts a pkg (xar) file with an internal dmg into a hybrid"
    echo "pkgdmg file that will open as either a disk image or installer"
    echo "package, depending on the extension. This pkgdmg can then be"
    echo "optionally signed using tools that support signing a xar or"
    echo "pkg file."
}

check_args () {
    # Checks to see whether these args are valid, and exists with an error
    # if not. Exit value is set to 1

    if [[ "$#" -ne 2 ]]; then
        print_help
        print_usage
        exit 1
    fi

    INFILE="$1"
    OUTFILE="$2"

    if [[ -d "$OUTFILE" ]]; then
        echo "Error: $OUTFILE is a directory, not a file" >> /dev/stderr
        exit 1
    fi

    if [[ ! -f "$OUTFILE" ]]; then
        touch "$OUTFILE" 2> /dev/null
        if [[ $? -ne 0 ]]; then
            echo "Error: Cannot write to $OUTFILE" >> /dev/stderr
            exit 1
        fi
        rm "$OUTFILE"
    fi
    return 0
}

get_numeric () {
    # Strips any non-numeric characters from the passed string
    # WARNING: this will glob multiple numbers together, eg
    # "123 abc 123" becomes "123123"

    echo "$@" | sed 's/[^0-9]*//g' 
}

dec2bin () {
    # Takes a decimal number passed at "$1" and returns
    # the 64-bit binary representation of that number
    
    printf "%016x\n" "$1" | xxd -ps -g0 -r
}

bin2dec () {
    # Takes a 64-bit binary number passed at "$1" and returns
    # the decimal representation of that number
    
    echo $((16#$(echo -en "$1" | xxd -ps -g0)))
}

check_xar () {
    # Checks to see if the file passed in "$1" is a valid xar archive

    local MAGIC=$(dd if="$1" bs=1 count=4 2> /dev/null)

    if [[ $? -ne 0 ]]; then
        echo "Error: Cannot read from $INFILE" >> /dev/stderr
        exit 1
    fi

    if [[ $MAGIC != $XAR_MAGIC ]]; then
        echo "Error: $INFILE does not appear to be a xar archive" >> /dev/stderr
        exit 1
    fi
    return 0
}

get_header () {
    # Checks to see if the file passed in "$1" is a valid xar archive
    # then attemps to get the archive's header information

    check_xar "$1"
    local XAR_HEADER=$(xar --dump-header -f "$INFILE")
    echo "$XAR_HEADER"
}

get_toc () {
    # Checks to see if the file passed in "$1" is a valid xar archive
    # then attemps to get the archive's Table of Contents XML file

    check_xar "$1"
    local XAR_TOC=$(xar --dump-toc=- -f "$INFILE")
    echo "$XAR_TOC"
}    

get_dirlist () {
    # Checks to see if the file passed in "$1" is a valid xar archive
    # then attemps to get the a list of all files in the archive 

    check_xar "$1"
    local XAR_DIRLIST=$(xar -t -f "$1")
    echo "$XAR_DIRLIST"
}

check_for_dmg () {
    # Checks to see if there is a dmg in the xar archive
    # passed at "$1". Currently only supports one dmg per archive

    local NUM_DMGS=$(echo $(get_dirlist "$1") | grep -ci ".dmg")
    if [[ $NUM_DMGS -eq 0 ]]; then
        echo "Error: $INFILE does not appear to contain a dmg" >> /dev/stderr
        exit 1
    fi

    if [[ $NUM_DMGS -gt 1 ]]; then
        echo "Error: Multiple dmgs found in $INFILE. This is not yet supported" >> /dev/stderr
        exit 1
    fi
    return 0
}

get_dmg_id () {
    # Checks to see if there is a dmg in the xar archive
    # passed at "$1". If it's a valid archive and contains a dmg
    # file, get the index in the archive's ToC of the file   

    check_for_dmg "$1"
    local DMG_NAME=$(basename $(echo "$(get_dirlist "$1")" | grep -i ".dmg"))
    local DMG_ID=$(get_numeric $(echo "$(get_toc "$1")" | grep -B 1 "$DMG_NAME" | head -1))
    echo $DMG_ID
}

get_file_size () {
    # Gets the size of the file in archive "$1" at index "$2"
    # in the archive's ToC. We use the 'size' variable because
    # the archive should be uncompressed

    local FILE_SIZE=$(echo "$(get_toc "$1")" | xmllint --xpath "//*[@id=$2]/data/size/text()" -)
    echo $FILE_SIZE
}

get_file_offset () {
    # Gets the offset of the file in archive "$1" at index "$2"
    # This is used to find the byte offset of the file within
    # the archive

    local HEADER_SIZE=$(get_numeric "$(echo "$(get_header "$1")" | grep "size")")
    local TOC_SIZE=$(get_numeric "$(echo "$(get_header "$1")" | grep "Compressed")")
    local HEAP_OFFSET=$(get_numeric "$(echo "$(get_toc "$1")" | xmllint --xpath "//*[@id=$2]/data/offset/text()" - )")
    
    echo $(($HEADER_SIZE + $TOC_SIZE + $HEAP_OFFSET))
}

get_eof () {
    # Attempts to find the byte offset of the end of the file
    # passed as "$1"

    local EOF=$(wc -c < "$1")
    echo $EOF
}

get_koly_block () {
    # Attempts to read the 512 byte koly block of the file passed
    # by "$1". If "$1" is actually the switch "--offset", will
    # attempt to read the block from the file passed at "$3" at offset
    # "$2" - 512

    local OFFSET=0
    local FILENAME="$1"

    if [[ "$FILENAME" == "--offset" ]]; then
        OFFSET=$(($2 - 512))
        local FILENAME="$3"
    else
        OFFSET=$(($(get_eof "$1") - 512))
    fi

    dd if="$FILENAME" skip="$OFFSET" bs=1 count=512 2> /dev/null
}

check_koly_block () {
    # Takes a block of bytes (usually passed from get_koly_block) and
    # checks for the magic 'koly' as the first four bytes. Returns
    # success (0) if it is a valid koly block, otherwise error (1)

    local MAGIC=$(get_koly_block "$@" | dd bs=1 count=4 2> /dev/null)

    if [[ "$MAGIC" == "$KOLY_MAGIC" ]]; then
        return 0
    else
        return 1
    fi
}

# Check to see the args we've been passed are valid
check_args "$@"

check_xar "$INFILE"
VALID_PKG="$?"

check_koly_block "$INFILE"
VALID_DMG="$?"

# Check to see if the file passed is already a pkgdmg. Exit if yes
if [[ ($VALID_PKG -eq 0) && ($VALID_DMG -eq 0) ]]; then 
    echo "Error: $INFILE already appears to be a pkgdmg" >> /dev/stderr
    exit 1
fi

# Otherwise, attempt to find the dmg ID within the xar archive
DMG_ID=$(get_dmg_id "$INFILE")

# Get the offset and file length here.
FILE_SIZE=$(get_file_size "$INFILE" $DMG_ID)
FILE_OFFSET=$(get_file_offset "$INFILE" $DMG_ID)

# Check to make sure it's a valid dmg
check_koly_block --offset $((FILE_SIZE + FILE_OFFSET)) "$INFILE"
VALID_DMG="$?"

if [[ $VALID_DMG -ne 0 ]]; then
    echo "Error: File at index $DMG_ID does not appear to be a valid dmg" >> /dev/stderr
    exit 1
fi

# Here we know we have a single, apparently valid dmg within
# a valid xar archive. We need to copy $INFILE to $OUTFILE,
# concatenate the koly block of the internal dmg onto
# $OUTFILE, then patch the 'Data fork offset' and the
# Offset of the dmg's property list by adding $FILE_OFFSET
# to both of these values

# Copy the bulk of the archive
cp "$INFILE" "$OUTFILE"

# Copy the koly block from the internal dmg file. Append to the new file
get_koly_block --offset $((FILE_SIZE + FILE_OFFSET)) "$INFILE" >> "$OUTFILE"

# Get the location of the offset to the dmg in the new koly block
DMG_OFFSET_LOCATION=$(($(get_eof "$OUTFILE") - 512 + 24))

# Get the old offset, per the old dmg
OLD_DMG_OFFSET=$(bin2dec $(dd if="$OUTFILE" skip=$DMG_OFFSET_LOCATION bs=1 count=8 2> /dev/null))

# Get the location of the offset to the dmg's plist file
XML_OFFSET_LOCATION=$(($(get_eof "$OUTFILE") - 512 + 216))

# Get the old offset, per the old dmg
OLD_XML_OFFSET=$(bin2dec $(dd if="$OUTFILE" skip=$XML_OFFSET_LOCATION bs=1 count=8 2> /dev/null))

# Calculate new offsets
NEW_DMG_OFFSET=$(($OLD_DMG_OFFSET + $FILE_OFFSET))
NEW_XML_OFFSET=$(($OLD_XML_OFFSET + $FILE_OFFSET))

# Write the new offsets to the new dmg
dec2bin $NEW_DMG_OFFSET | dd of="$OUTFILE" bs=1 count=8 seek=$DMG_OFFSET_LOCATION conv=notrunc 2> /dev/null
dec2bin $NEW_XML_OFFSET | dd of="$OUTFILE" bs=1 count=8 seek=$XML_OFFSET_LOCATION conv=notrunc 2> /dev/null

# And we're done!
